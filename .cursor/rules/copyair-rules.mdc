---
description: Product Requirements Document for Copy Whisper AI Copywriter
globs:
  - src/**
alwaysApply: true
---
1. Product Summary
This web application is an AI-powered copywriting assistant designed primarily for new and early-career copywriters, but also useful for marketers and business owners. The app helps users efficiently generate high-quality copy for various purposes (emails, social media, ads, etc.) by leveraging AI to streamline the writing process, reduce time spent on research, and improve the quality of their work. The interface is beginner-friendly, requiring no advanced technical skills or prompt engineering.

2. Key Differentiators (Expanded)
Beginner-focused: Designed for users with little to no copywriting or AI experience.
Guided workflow: Structured process that walks users through copywriting best practices.
Conversation-based refinement: Natural dialogue approach to editing copy rather than complex form-based iterations. (Note: Current implementation directs to a display page, not chat).
Transparent AI: Clear explanation of how AI generates content, building trust with users who may be skeptical.
Learning tool: Positioned not just as a generation tool but as a way for new copywriters to improve their skills.

3. Detailed MVP Features
User Registration/Login
Users can register, log in, and reset their password using Supabase Authentication.
Error handling: Clear error messages for invalid credentials, network issues, or service disruptions.
Rate limiting: Prevent brute force attacks with appropriate cooldown periods.
Copywriting Form (`src/components/CopywritingForm.tsx`)
Users fill out a form with the following fields:
Niche (string, required)
Product Name (string, required)
Product Description (string, required)
Tone (string, e.g., formal, informal, friendly, professional)
Target Public (string, e.g., age group, profession, interests)
Text Format (string, e.g., email, ad, social media post, product description)
Text Length (string, e.g., short, medium, long, word/character count)
Keywords to Include (string, comma-separated suggested)
Text Objective (string, e.g., inform, persuade, sell, engage)
Language (string, e.g., English, Spanish, etc.) - Specifies output language for AI
The form validates required fields using HTML `required` attribute and is responsive using CSS Grid.
Error handling: Field-specific validation with browser default messages.
Autosave: Form data is NOT currently saved as draft if user navigates away (Consider adding).
AI Copy Generation (`src/hooks/useCopywritingGenerator.ts`)
The app sends form data to the `generate-copywriting` Supabase Edge Function, which calls the ChatGPT-4o API.
The generated copy is passed via route state to the `/generated-copy` page.
Loading states: Button text changes ("Generating...") and a spinning icon (`Wand2`) is displayed.
Error handling: Graceful error messages via toast notifications for API timeouts or failures.
Generated Copy Display Page (`/generated-copy`)
Displays the generated text received via route state.
Allows user to copy the text.
(Optional/Future: Allow saving, editing, or initiating a chat refinement session).
Copy Editing Chat (Future/Deferred)
(Deferred from MVP) Users can refine the generated copy through a chat interface with the AI.
Chat History (Future/Deferred)
(Deferred from MVP) Users can view and revisit their past chat sessions.
Basic Styling/Formatting (Optional/Nice-to-have)
(Deferred from MVP) Users can apply basic formatting to the generated copy.

4. User Flow
User lands on the landing page.
User clicks "Sign Up" and completes registration.
User is redirected to the dashboard (or main form page).
User can:
View profile or log out
Create a New Copy (opens the copywriting form `CopywritingForm.tsx`)
User fills out the copywriting form and submits.
The app displays a loading indicator (button state change) while generating content via `useCopywritingGenerator`.
The app navigates to the `/generated-copy` route, passing the generated text and initial input via route state.
User views the generated copy on the `/generated-copy` page.
User can copy the text.
(Future: User might save, edit, or start a chat).
User's generated text and profile are potentially updated in the background via `saveDataForUser`.

5. Technical Stack & Integrations
Frontend:
Framework: React (with TypeScript)
Styling: Tailwind CSS (using shadcn/ui components)
UI Components: shadcn/ui (`Input`, `Button`, `Label`, `Toast`)
Icons: lucide-react
State Management: React `useState`, route state for passing data
Routing: `react-router-dom`
Backend:
Language: TypeScript/JavaScript (via Supabase Edge Functions)
Framework: Supabase Edge Functions (running on Deno runtime)
Function Name: `generate-copywriting`
Database:
PostgreSQL (managed by Supabase)
AI Integration:
ChatGPT-4o API (OpenAI), called from `generate-copywriting` Supabase Edge Function
Authentication:
Supabase Authentication
Hosting:
Vercel (Confirmed/Assumed - update if different)
Notifications/Feedback:
shadcn/ui `use-toast`

6. Data Model (Simplified for MVP)
Database Tables (Supabase PostgreSQL)
`profiles` (Managed by Supabase Auth, extended)
`user_id` (PK, FK to `auth.users`, UUID)
`updated_at` (TimestampTZ)
`niche` (text) - Stores last used niche
`product_name` (text) - Stores last used product name
`product_description` (text) - Stores last used product description
*(Consider adding other profile/preference fields)*
`copywriting_texts` (Stores history of generated texts)
`text_id` (PK, UUID)
`user_id` (FK to `auth.users`, UUID)
`created_at` (TimestampTZ, default `now()`)
`niche` (text)
`product_name` (text)
`product_description` (text)
`generated_text` (text)
*(Consider adding `tone`, `target_public`, `text_format`, `text_length`, `keywords`, `text_objective`, `language` to store full context)*

Data Relationships
One User (`auth.users`) has one Profile (`profiles`)
One User (`auth.users`) can have many Copywriting Texts (`copywriting_texts`)

7. Non-Functional Requirements (New Section)
Performance
Page load time: < 2 seconds for dashboard/form
API response time: < 10 seconds for copy generation (depends on OpenAI)
Support for concurrent users (TBD based on Supabase plan)
Accessibility
WCAG 2.1 AA compliance goal
Screen reader compatible
Keyboard navigation support
Sufficient color contrast (Check gradients/custom colors)
Security
Data encryption in transit (HTTPS by default on Vercel/Supabase)
Secure storage of OpenAI API keys (as Supabase Edge Function environment variables)
Rate limiting via Supabase function settings (TBD)
No storage of sensitive user information beyond auth/profile.
Browser Compatibility
Support latest versions of Chrome, Firefox, Safari, Edge
Mobile responsive (iOS Safari, Android Chrome)
Minimum screen size: 320px width

8. Error Handling & Edge Cases (New Section)
Critical Error Paths
OpenAI API Unavailable / `generate-copywriting` Function Error
Show user-friendly error toast notification (`use-toast`, `variant: 'destructive'`).
Log detailed error to console/monitoring.
Offer retry implicitly (user can resubmit form).
Database Save Error (`saveDataForUser` in `useCopywritingGenerator`)
Log error to console (`console.error`).
Show non-critical error toast (e.g., "Failed to save history").
Proceed with displaying the generated text to the user.
Form Submission Errors
Client-side HTML `required` attribute provides basic validation.
Consider adding more robust client-side validation if needed.
Authentication Failures
Handled by Supabase Auth UI/logic.
Provide specific error messages where possible.
Connection Issues
Browser default handling. `useCopywritingGenerator` includes `try...catch...finally`.
Consider adding specific offline detection/handling if required.
Data Validation
Sanitize inputs on the backend (Supabase function) before sending to OpenAI.
Validate required fields client-side.

9. Testing & Quality Assurance (New Section)
Test Requirements
Unit tests for critical functions (e.g., helper functions, potentially `useCopywritingGenerator` logic if complex).
Integration tests for Supabase Edge Function (`generate-copywriting`).
E2E tests for main user flows (Auth -> Form -> Generation -> Display).
Accessibility testing (automated tools like Axe, manual checks).
QA Process
Developer testing during development.
Code review before merging PRs.
Automated tests (if implemented) run on PRs/commits.
Manual QA testing before deployment.

10. UI/UX Specifications (New Section)
Design System
Based on `shadcn/ui` components (`Input`, `Button`, `Label`, `Toast`).
Utilizes Tailwind CSS for layout and utility classes.
Layout
Responsive form using CSS Grid (`grid`, `grid-cols-1`, `md:grid-cols-2`, `md:col-span-2`).
Styling Details
Custom input style: `bg-[#3a1465]/40`, `border-purple-500/30`, `placeholder:text-gray-400`, `focus-visible:ring-[#FF2EE6]`.
Gradient button: `bg-gradient-to-r from-[#FF2EE6] to-[#00FFCC]`.
Iconography
`lucide-react` used for icons in labels/buttons (e.g., `Sparkles`, `Target`, `Mic`, `ListChecks`, `Scale`, `Key`, `Goal`, `LanguagesIcon`, `Wand2`, `SendHorizontal`).
Loading States
Button text changes to "Generating..."
Button shows spinning `Wand2` icon.
Button is disabled during loading.
Feedback
Toast notifications (`use-toast`) used for success ("Copywriting Generated") and errors ("Failed to generate copywriting", "Failed to save history").
Responsive Breakpoints (Tailwind defaults)
Mobile: < 640px
Tablet: 640px - 1024px
Desktop: >= 1024px
Interaction Patterns
Standard form interactions.
Toast notifications for system feedback.
Inline validation via HTML `required`.
Hover states provided by Tailwind/shadcn defaults.
Animations: Subtle `lucide-react` spin animation on loading icon. Respect reduced-motion preferences where possible.

Inline validation for form fields
Confirmations for destructive actions
Hover states for interactive elements
Animations: Subtle, purpose-driven, respecting reduced-motion preferences
