---
description: 
globs: 
alwaysApply: true
---
Stripe Subscription Implementation Guide
Step-by-Step Implementation for AI Copywriting Web App
Introduction
This guide provides a comprehensive, step-by-step approach to implementing Stripe subscriptions and the required new features for the AI copywriting web app. The implementation will enable three subscription tiers (Free, Basic, Pro) with credit-based usage limits and additional features.

##Current App Overview
The current app allows users to:
• Complete a form with details (niche, product name, description, tone, target public, format, length, keywords, objective, language)
• Generate AI-written copy based on the form input
• Interact with the AI in a chat interface to refine the copy
• Access chat history via a sidebar
• Navigate through a dashboard to access forms, chats, and account settings

##Implementation Overview
The implementation consists of four main components:
1. Stripe Integration - Setting up subscription plans and payment processing
2. Credit System - Tracking and managing user credits
3. Feature Gating - Controlling access to features based on subscription tier
4. New Features - Adding image generation, model selection, and export options


##New Features(image generation, LLM model selection, export options)

Image generation and Export Options components will be present inside the /generated-copy page, on the right side of the screen. For mobile users, these components will be accessed via representative icons in the top left corner of the chat.

Image generation will use DALLE-3 API.

LLM model selection will be used ONLY in the /copywriting-form page.
Free users will only have access to ChatGPT-4o-mini
Basic users will have acces to ChatGPT-4o-mini, ChatGPT-4o and Chat GPT-4.1-mini
Pro Users will have access to ChatGPT-4o-mini, ChatGPT-4o, ChatGPT-4.1-mini and ChatGPT-4.1

##Credit system
For every generated text, 20 credits will be deducted from the users credit balance
For every message sent in the chat, 5 credits will be deducted from the users credit balance
For every image generation, 120 credits will be deducted from the users credit balance


##Subscription credit allowance 
Free plan: 200 credits
Basic plan: 2000 credits
Pro plan: 6000 credits


##Credits tracker UI component
Users will be able to see their remaining credits in the /dashboard page.



##Subscriptions
Make sure that the subscription payments work flawlessly, without any log errors in the Supabase Edge Functions or in Stripe Webhooks.
Users must have the option to unsubscribe from their current plan.
The subscription plans will be displayed in a /pricing page, which will be accesible via the /dashboard page

------------

###Folder structure

/
├── .cursor/
├── .vscode/
├── node_modules/
├── public/
├── src/
│   ├── components/
│   ├── hooks/
│   ├── integrations/
│   ├── lib/
│   ├── pages/
│   ├── App.css
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   ├── vite-env.d.ts
├── supabase/
├── .gitignore
├── bun.lockb
├── components.json
├── deno.lock
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
├── postcss.config.js
├── README.md
├── tailwind.config.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
├── vercel.json
├── vite.config.ts


------------

Subscription Payments System Architecture
Database Schema
sql
Copy SQL
-- Users table updates
ALTER TABLE users ADD COLUMN subscription_tier VARCHAR(20) DEFAULT 'free';
ALTER TABLE users ADD COLUMN credits_remaining INTEGER DEFAULT 200;
ALTER TABLE users ADD COLUMN credits_total INTEGER DEFAULT 200;
ALTER TABLE users ADD COLUMN subscription_start_date TIMESTAMP;
ALTER TABLE users ADD COLUMN subscription_end_date TIMESTAMP;
ALTER TABLE users ADD COLUMN stripe_customer_id VARCHAR(255);
ALTER TABLE users ADD COLUMN stripe_subscription_id VARCHAR(255);
ALTER TABLE users ADD COLUMN can_cancel BOOLEAN DEFAULT true;

-- Create subscriptions table
CREATE TABLE subscriptions (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  price_monthly DECIMAL(10,2) NOT NULL,
  credits_per_month INTEGER NOT NULL,
  features JSONB,
  stripe_price_id_monthly VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create credit_transactions table
CREATE TABLE credit_transactions (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  amount INTEGER NOT NULL,
  transaction_type VARCHAR(50) NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create feature_usage table
CREATE TABLE feature_usage (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  feature_type VARCHAR(50) NOT NULL,
  credits_used INTEGER NOT NULL,
  metadata JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
System Components Interaction
The subscription system consists of these interconnected components:

Client-side Components
Pricing page
Subscription management UI
Credit display
Feature access controls
Server-side Components
Supabase Edge Functions
Stripe webhook handlers
Database functions
External Services
Stripe API
Data Flow Diagram
User → Pricing Page → Checkout Session → Stripe Payment → Webhook → Database Update → Feature Access
Detailed Implementation
1. Stripe Product Configuration
Set up Stripe products and prices with proper metadata:

javascript
Copy Code
// src/lib/stripe-setup.js
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

async function setupStripeProducts() {
  // Basic Plan
  const basicProduct = await stripe.products.create({
    name: 'Basic Plan',
    description: '2,000 credits/month, unlimited chats, ChatGPT-4o access',
    metadata: {
      tier: 'basic',
      credits: '2000'
    }
  });

  await stripe.prices.create({
    product: basicProduct.id,
    unit_amount: 999, // $9.99
    currency: 'usd',
    recurring: { interval: 'month' },
    metadata: { tier: 'basic' }
  });

  // Pro Plan
  const proProduct = await stripe.products.create({
    name: 'Pro Plan',
    description: '6,000 credits/month, advanced AI models, all export options',
    metadata: {
      tier: 'pro',
      credits: '6000'
    }
  });

  await stripe.prices.create({
    product: proProduct.id,
    unit_amount: 2499, // $24.99
    currency: 'usd',
    recurring: { interval: 'month' },
    metadata: { tier: 'pro' }
  });
}
2. Supabase Edge Functions
Create Checkout Session
typescript
Copy Code
// supabase/functions/create-checkout-session/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno';

// Important: Use fetch-based HTTP client to avoid event loop errors
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') as string, {
  httpClient: Stripe.createFetchHttpClient()
});

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { 
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization'
      }
    });
  }

  try {
    const { priceId, userId, returnUrl } = await req.json();

    // Check if user already has an active subscription
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') as string,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') as string
    );

    const { data: userData, error: userError } = await supabaseClient
      .from('users')
      .select('stripe_customer_id, subscription_tier, subscription_end_date')
      .eq('id', userId)
      .single();

    if (userError) throw userError;

    // Prevent subscribing to a new plan if already subscribed
    const currentDate = new Date();
    if (
      userData.subscription_tier !== 'free' && 
      userData.subscription_end_date && 
      new Date(userData.subscription_end_date) > currentDate
    ) {
      return new Response(
        JSON.stringify({ 
          error: 'You already have an active subscription. Please wait until it expires or cancel it before subscribing to a new plan.' 
        }), 
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // Get or create Stripe customer
    let customerId = userData.stripe_customer_id;
    if (!customerId) {
      const { data: user } = await supabaseClient.auth.admin.getUserById(userId);
      
      const customer = await stripe.customers.create({
        email: user.user.email,
        metadata: { userId }
      });
      
      customerId = customer.id;
      
      await supabaseClient
        .from('users')
        .update({ stripe_customer_id: customerId })
        .eq('id', userId);
    }

    // Create checkout session
    const session = await stripe.checkout.sessions.create({
      customer: customerId,
      line_items: [{ price: priceId, quantity: 1 }],
      mode: 'subscription',
      success_url: `${returnUrl}?success=true`,
      cancel_url: `${returnUrl}?canceled=true`,
      subscription_data: {
        metadata: { userId }
      }
    });

    return new Response(
      JSON.stringify({ url: session.url }), 
      { headers: { 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }), 
      { 
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
});
Cancel Subscription
typescript
Copy Code
// supabase/functions/cancel-subscription/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno';

// Important: Use fetch-based HTTP client to avoid event loop errors
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') as string, {
  httpClient: Stripe.createFetchHttpClient()
});

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { 
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization'
      }
    });
  }

  try {
    const { userId } = await req.json();

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') as string,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') as string
    );

    // Get user's subscription
    const { data: userData, error: userError } = await supabaseClient
      .from('users')
      .select('stripe_subscription_id')
      .eq('id', userId)
      .single();

    if (userError) throw userError;
    if (!userData.stripe_subscription_id) {
      throw new Error('No active subscription found');
    }

    // Cancel subscription at period end
    await stripe.subscriptions.update(userData.stripe_subscription_id, {
      cancel_at_period_end: true
    });

    // Update user record
    await supabaseClient
      .from('users')
      .update({ can_cancel: false })
      .eq('id', userId);

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Subscription will be canceled at the end of the billing period' 
      }), 
      { headers: { 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }), 
      { 
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
});
Stripe Webhook Handler
typescript
Copy Code
// supabase/functions/stripe-webhook/index.ts
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno';

// Important: Use fetch-based HTTP client to avoid event loop errors
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') as string, {
  httpClient: Stripe.createFetchHttpClient()
});

const endpointSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET') as string;

serve(async (req) => {
  const signature = req.headers.get('stripe-signature');
  if (!signature) {
    return new Response('Missing stripe-signature header', { status: 400 });
  }

  const body = await req.text();
  let event;

  try {
    event = stripe.webhooks.constructEvent(body, signature, endpointSecret);
  } catch (err) {
    return new Response(`Webhook Error: ${err.message}`, { status: 400 });
  }

  // Create Supabase client
  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') as string,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') as string
  );

  // Handle the event
  try {
    switch (event.type) {
      case 'customer.subscription.created':
      case 'customer.subscription.updated': {
        const subscription = event.data.object;
        const userId = subscription.metadata.userId;
        
        // Get subscription details from Stripe
        const stripeSubscription = await stripe.subscriptions.retrieve(
          subscription.id,
          { expand: ['items.data.price.product'] }
        );
        
        const product = stripeSubscription.items.data[0].price.product;
        const tierName = product.metadata.tier || 'basic';
        const creditsPerMonth = parseInt(product.metadata.credits || '2000');
        
        // Update user subscription
        await supabaseClient
          .from('users')
          .update({
            subscription_tier: tierName,
            credits_remaining: creditsPerMonth,
            credits_total: creditsPerMonth,
            subscription_start_date: new Date(subscription.current_period_start * 1000).toISOString(),
            subscription_end_date: new Date(subscription.current_period_end * 1000).toISOString(),
            stripe_subscription_id: subscription.id,
            can_cancel: true
          })
          .eq('id', userId);
        
        // Record credit transaction
        await supabaseClient
          .from('credit_transactions')
          .insert({
            user_id: userId,
            amount: creditsPerMonth,
            transaction_type: 'subscription_renewal',
            description: `Credits from ${tierName} subscription`
          });
        
        break;
      }
      
      case 'customer.subscription.deleted': {
        const subscription = event.data.object;
        const userId = subscription.metadata.userId;
        
        // Update user to free tier
        await supabaseClient
          .from('users')
          .update({
            subscription_tier: 'free',
            credits_remaining: 200,
            credits_total: 200,
            stripe_subscription_id: null,
            can_cancel: true
          })
          .eq('id', userId);
        
        break;
      }
    }
    
    return new Response(JSON.stringify({ received: true }), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error processing webhook:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
});
3. Credit System Implementation
Database Function for Credit Usage
sql
Copy SQL
-- Create a function to use credits
CREATE OR REPLACE FUNCTION use_credits(
  p_user_id UUID,
  p_amount INTEGER,
  p_feature_type VARCHAR(50),
  p_metadata JSONB DEFAULT '{}'::JSONB
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_credits_remaining INTEGER;
BEGIN
  -- Get current credits
  SELECT credits_remaining INTO v_credits_remaining
  FROM users
  WHERE id = p_user_id;

  -- Check if user has enough credits
  IF v_credits_remaining < p_amount THEN
    RETURN FALSE;
  END IF;

  -- Update user's credits
  UPDATE users
  SET credits_remaining = credits_remaining - p_amount
  WHERE id = p_user_id;

  -- Record the transaction
  INSERT INTO credit_transactions (
    user_id,
    amount,
    transaction_type,
    description
  ) VALUES (
    p_user_id,
    -p_amount,
    'usage',
    'Used for ' || p_feature_type
  );

  -- Record feature usage
  INSERT INTO feature_usage (
    user_id,
    feature_type,
    credits_used,
    metadata
  ) VALUES (
    p_user_id,
    p_feature_type,
    p_amount,
    p_metadata
  );

  RETURN TRUE;
END;
$$;
Credit Hook Implementation
typescript
Copy Code
// src/hooks/useCredits.ts
import { useState } from 'react';
import { useUser } from './useUser';
import { supabase } from '@/lib/supabase';

export const useCredits = () => {
  const { user, subscription, mutate } = useUser();
  const [isChecking, setIsChecking] = useState(false);

  const checkCredits = async (requiredCredits: number) => {
    if (!user || !subscription) return false;

    setIsChecking(true);

    try {
      const { creditsRemaining } = subscription;
      return creditsRemaining >= requiredCredits;
    } catch (error) {
      console.error('Error checking credits:', error);
      return false;
    } finally {
      setIsChecking(false);
    }
  };

  const useCredits = async (amount: number, featureType: string, metadata = {}) => {
    if (!user || !subscription) return false;

    try {
      // Check if user has enough credits
      const hasEnough = await checkCredits(amount);
      if (!hasEnough) return false;

      // Deduct credits
      const { data, error } = await supabase.rpc('use_credits', {
        p_user_id: user.id,
        p_amount: amount,
        p_feature_type: featureType,
        p_metadata: metadata
      });

      if (error) throw error;

      // Update local subscription data
      mutate();

      return true;
    } catch (error) {
      console.error('Error using credits:', error);
      return false;
    }
  };

  return {
    checkCredits,
    useCredits,
    isChecking,
  };
};
4. Subscription Management UI
Pricing Page Component
tsx
Copy Code
// src/components/PricingPage.tsx
import React from 'react';
import { useUser } from '@/lib/hooks/useUser';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { CheckIcon } from 'lucide-react';
import { createCheckoutSession, cancelSubscription } from '@/lib/api';
import { toast } from '@/components/ui/use-toast';

const PricingPage = () => {
  const { user, subscription } = useUser();
  const [isLoading, setIsLoading] = useState(false);

  const handleSubscribe = async (priceId: string) => {
    if (!user) {
      toast({
        title: 'Sign in required',
        description: 'Please sign in to subscribe to a plan',
        variant: 'destructive',
      });
      return;
    }

    setIsLoading(true);

    try {
      const { url, error } = await createCheckoutSession({
        priceId,
        userId: user.id,
        returnUrl: window.location.origin + '/dashboard',
      });

      if (error) {
        toast({
          title: 'Subscription Error',
          description: error,
          variant: 'destructive',
        });
        return;
      }

      window.location.href = url;
    } catch (error) {
      console.error('Error creating checkout session:', error);
      toast({
        title: 'Error',
        description: 'Failed to create checkout session. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancelSubscription = async () => {
    if (!user || !subscription?.stripeSubscriptionId) return;

    setIsLoading(true);

    try {
      const { success, message, error } = await cancelSubscription({
        userId: user.id,
      });

      if (error) {
        toast({
          title: 'Cancellation Error',
          description: error,
          variant: 'destructive',
        });
        return;
      }

      toast({
        title: 'Subscription Canceled',
        description: message,
      });
    } catch (error) {
      console.error('Error canceling subscription:', error);
      toast({
        title: 'Error',
        description: 'Failed to cancel subscription. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold text-center mb-10">Choose Your Plan</h1>

      {subscription && subscription.tier !== 'free' && (
        <div className="mb-8 p-4 border rounded-lg">
          <h2 className="text-xl font-semibold mb-2">Current Subscription</h2>
          <p>
            You are currently on the <span className="font-medium capitalize">{subscription.tier}</span> plan.
            Your subscription will {subscription.canCancel ? 'renew' : 'end'} on {new Date(subscription.endDate).toLocaleDateString()}.
          </p>
          {subscription.canCancel && (
            <Button 
              variant="outline" 
              className="mt-4"
              onClick={handleCancelSubscription}
              disabled={isLoading}
            >
              Cancel Subscription
            </Button>
          )}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Free Plan */}
        <Card>
          <CardHeader>
            <CardTitle>Free</CardTitle>
            <CardDescription>For occasional use</CardDescription>
            <div className="mt-4 text-3xl font-bold">$0</div>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>200 credits per month</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>3 active chats maximum</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>ChatGPT-4o-mini only</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>2 regenerations per copy</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Plain text export only</span>
              </li>
            </ul>
          </CardContent>
          <CardFooter>
            <Button 
              variant="outline" 
              className="w-full"
              disabled={subscription?.tier === 'free' || isLoading}
            >
              {subscription?.tier === 'free' ? 'Current Plan' : 'Get Started'}
            </Button>
          </CardFooter>
        </Card>

        {/* Basic Plan */}
        <Card className="border-primary">
          <CardHeader>
            <CardTitle>Basic</CardTitle>
            <CardDescription>For regular content creators</CardDescription>
            <div className="mt-4 text-3xl font-bold">$9.99<span className="text-sm font-normal">/month</span></div>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>2,000 credits per month</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Unlimited chats</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>ChatGPT-4o access</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Basic image generation</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Unlimited regenerations</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Plain text & Markdown export</span>
              </li>
            </ul>
          </CardContent>
          <CardFooter>
            <Button 
              className="w-full"
              onClick={() => handleSubscribe('price_basic_monthly_id')}
              disabled={subscription?.tier === 'basic' || isLoading || (subscription?.tier !== 'free' && !subscription?.canCancel)}
            >
              {subscription?.tier === 'basic' ? 'Current Plan' : 'Subscribe'}
            </Button>
          </CardFooter>
        </Card>

        {/* Pro Plan */}
        <Card>
          <CardHeader>
            <CardTitle>Pro</CardTitle>
            <CardDescription>For power users</CardDescription>
            <div className="mt-4 text-3xl font-bold">$24.99<span className="text-sm font-normal">/month</span></div>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>6,000 credits per month</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Everything in Basic</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>Access to ChatGPT-4.1</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>High-quality image generation</span>
              </li>
              <li className="flex items-center">
                <CheckIcon className="h-5 w-5 mr-2 text-green-500" />
                <span>All export formats</span>
              </li>
            </ul>
          </CardContent>
          <CardFooter>
            <Button 
              className="w-full"
              onClick={() => handleSubscribe('price_pro_monthly_id')}
              disabled={subscription?.tier === 'pro' || isLoading || (subscription?.tier !== 'free' && !subscription?.canCancel)}
            >
              {subscription?.tier === 'pro' ? 'Current Plan' : 'Subscribe'}
            </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
};

export default PricingPage;
5. API Implementation
typescript
Copy Code
// src/lib/api.ts
import { supabase } from './supabase';

export const createCheckoutSession = async ({
  priceId,
  userId,
  returnUrl,
}: {
  priceId: string;
  userId: string;
  returnUrl: string;
}) => {
  try {
    const { data, error } = await supabase.functions.invoke('create-checkout-session', {
      body: { priceId, userId, returnUrl },
    });

    if (error) return { error: error.message };
    return data;
  } catch (error) {
    console.error('API error in createCheckoutSession:', error);
    return { error: 'Failed to create checkout session' };
  }
};

export const cancelSubscription = async ({
  userId,
}: {
  userId: string;
}) => {
  try {
    const { data, error } = await supabase.functions.invoke('cancel-subscription', {
      body: { userId },
    });

    if (error) return { error: error.message };
    return data;
  } catch (error) {
    console.error('API error in cancelSubscription:', error);
    return { error: 'Failed to cancel subscription' };
  }
};

export const getUserSubscription = async () => {
  try {
    const { data: user } = await supabase.auth.getUser();

    if (!user.user) throw new Error('User not authenticated');

    const { data, error } = await supabase
      .from('users')
      .select(`
        subscription_tier,
        credits_remaining,
        credits_total,
        subscription_start_date,
        subscription_end_date,
        stripe_subscription_id,
        can_cancel
      `)
      .eq('id', user.user.id)
      .single();

    if (error) throw error;

    return {
      tier: data.subscription_tier,
      creditsRemaining: data.credits_remaining,
      creditsTotal: data.credits_total,
      startDate: data.subscription_start_date,
      endDate: data.subscription_end_date,
      stripeSubscriptionId: data.stripe_subscription_id,
      canCancel: data.can_cancel
    };
  } catch (error) {
    console.error('API error in getUserSubscription:', error);
    return null;
  }
};
Avoiding Common Errors
Preventing Deno Event Loop Errors
The error you've been facing is related to Deno's event loop handling in Supabase Edge Functions. To avoid this error:

Use Fetch-Based HTTP Clients:
typescript
Copy Code
// CORRECT: Use fetch-based HTTP client
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') as string, {
  httpClient: Stripe.createFetchHttpClient()
});
// INCORRECT: Don't use default HTTP client
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') as string);
Avoid Node.js-specific APIs:
Don't use process.nextTick() or other Node.js-specific event loop methods
Don't import Node.js-specific modules that might use these methods
Use Async/Await Consistently:
Always use async/await for asynchronous operations
Don't mix Promises and callbacks
Avoid Nested Callbacks:
Use Promise chaining or async/await instead of nested callbacks
Handle Errors Properly:
Always catch errors in async functions
Return appropriate error responses
Subscription Management Rules
Prevent Multiple Active Subscriptions:
Check for existing active subscriptions before allowing a new subscription
Implement proper validation in the checkout session creation
Subscription Cancellation:
Allow users to cancel their subscription at any time
When canceled, subscription remains active until the end of the billing period
After cancellation, automatically downgrade to free tier
No additional charges after cancellation
Credit Management:
Credits are allocated at the start of each billing period
Credits are deducted for each feature usage
Unused credits don't roll over to the next billing period
Testing and Validation
Test Cases
Subscription Creation:
User can subscribe to a plan
Credits are allocated correctly
Features are accessible based on the plan
Credit Usage:
Credits are deducted correctly for each feature
User can't use features when out of credits
Subscription Cancellation:
User can cancel subscription
User retains access until the end of the billing period
User is downgraded to free tier after the billing period
Webhook Handling:
All Stripe events are processed correctly
Database is updated accordingly
Validation Steps
Local Testing:
Use Stripe CLI to simulate webhook events
Test all subscription flows locally
Staging Environment:
Deploy to staging environment
Test with Stripe test mode
Production Deployment:
Deploy to production
Monitor logs for any errors
Set up alerts for webhook failures
